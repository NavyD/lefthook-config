# yaml-language-server: $schema=https://raw.githubusercontent.com/evilmartians/lefthook/refs/heads/master/schema.json
min_version: "1.13.1"

pre-commit:
  fail_on_changes: "always"
  parallel: false
  piped: true
  jobs:
    - name: fix
      stage_fixed: true
      group:
        parallel: true
        jobs:
          - name: markdown
            file_types:
              - text
            glob: "*.{md,markdown}"
            group:
              piped: true
              jobs:
                - name: autocorrect-CJK
                  # https://github.com/huacnlee/autocorrect#use-in-cli
                  run: autocorrect --fix '{staged_files}'
                  only:
                    - run: autocorrect --version
                - name: markdownlint
                  # https://github.com/DavidAnson/markdownlint-cli2#command-line
                  run: markdownlint-cli2 --fix '{staged_files}'
                  only:
                    - run: markdownlint-cli2 --version
                - name: typos
                  # [Source code spell checker](https://github.com/crate-ci/typos)
                  run: typos --force-exclude --write-changes '{staged_files}'
                  only:
                    - run: typos --version
          - name: python
            file_types:
              - text
            group:
              piped: true
              jobs:
                - name: uv-lock
                  run: uv lock
                  glob: &uv_files
                    - uv.lock
                    - uv.toml
                    - pyproject.toml
                  only: &uv_only_run
                    - run: python --version
                    - run: uv --version
                - name: ruff-check-fix
                  run: ruff check --force-exclude --fix '{staged_files}'
                  glob: &ruff_files "*.{py,pyi}"
                  only: &ruff_only_run
                    - run: python --version
                    - run: ruff --version
    - name: format
      stage_fixed: true
      group:
        parallel: true
        jobs:
          - name: prettier
            # [Prettier is an opinionated code formatter.](https://github.com/prettier/prettier)
            run: prettier --ignore-unknown --write '{staged_files}'
            glob: "*.{json,md,markdown,yml,yaml,css,scss,less,html,htm,js,jsx,ts,tsx,vue,graphql,gql}{,.*}"
            only:
              - run: prettier --version

          ## lua
          - name: lua
            # [A Lua code formatter](https://github.com/JohnnyMorganz/StyLua)
            run: stylua '{staged_files}'
            glob: "*.{lua,luau}"
            only:
              - run: stylua --version

          ## python
          - name: python
            file_types:
              - text
            group:
              piped: true
              jobs:
                - name: ruff-format
                  run: ruff format --force-exclude '{staged_files}'
                  glob: *ruff_files
                  only: *ruff_only_run

          ## shell
          - name: shell
            file_types:
              - text
            group:
              piped: true
              jobs:
                - name: shfmt
                  # [A shell parser, formatter, and interpreter with bash support; includes shfmt](https://github.com/mvdan/sh)
                  # 支持 editorconfig
                  run: shfmt -l -w '{staged_files}'
                  glob: &sh_files "*.{sh,bash}{,.*}"
                  only:
                    - run: shfmt --version
    - name: check
      group:
        parallel: true
        jobs:
          - name: actionlint
            # https://github.com/rhysd/actionlint/blob/main/docs/usage.md
            run: actionlint '{staged_files}'
            glob: .github/workflows/*.{yaml,yml}
            only:
              - run: actionlint --version
          - name: gitleaks
            # https://github.com/gitleaks/gitleaks#commands
            run: gitleaks --no-banner --no-color git --staged -v
            file_types:
              - text
            only:
              - run: gitleaks --version
          - name: editorconfig-checker
            # NOTE: max_line_length 规则非常容易触发限制，可以使用排除规则避免这个问题
            # https://github.com/editorconfig-checker/editorconfig-checker#excluding
            run: editorconfig-checker -no-color '{staged_files}'
            file_types:
              - text
            only:
              - run: editorconfig-checker --version

          # https://github.com/pre-commit/pre-commit-hooks
          - name: check-illegal-windows-names
            # https://github.com/pre-commit/pre-commit-hooks/blob/31903eabdb97f5a3375fb1ea419ff782de64d7e7/.pre-commit-hooks.yaml#L49
            only:
              - run: python --version
            run: |
              python - '{staged_files}' <<'EOF'
              import os
              import re
              import sys
              name_pat = re.compile(r'(?i)((^|/)(CON|PRN|AUX|NUL|COM[\d¹²³]|LPT[\d¹²³])(\.|/|$)|[<>:\"\\|?*\x00-\x1F]|/[^/]*[\.\s]/|[^/]*[\.\s]$)')
              for arg in sys.argv[1:]:
                  # NOTE: 移除 windows 绝对路径包含的盘符 `C:` 避免 `:` 匹配
                  # 在非 windows 平台上不会移除盘符
                  _drive, path = os.path.splitdrive(arg)
                  if m := name_pat.search(path):
                      msg = f'Found invalid chars `{m.group()}` in `{path}`'
                      raise ValueError(msg)
              EOF
          - name: check-case-conflict
            only:
              - run: check-case-conflict -h
            run: check-case-conflict '{staged_files}'
          - name: check-merge-conflict
            only:
              - run: check-merge-conflict -h
            run: check-merge-conflict '{staged_files}'
            file_types:
              - text
          - name: check-symlinks
            only:
              - run: check-symlinks -h
            run: check-symlinks '{staged_files}'
          - name: destroyed-symlinks
            only:
              - run: destroyed-symlinks -h
            run: destroyed-symlinks '{staged_files}'

          ## docker
          - name: hadolint
            # [Dockerfile linter, validate inline bash, written in Haskell](https://github.com/hadolint/hadolint)
            run: hadolint '{staged_files}'
            glob: "{,*.}{Dockerfile,dockerfile}"
            only:
              - run: hadolint --version

          ## markdown
          - name: markdown
            file_types:
              - text
            glob: "*.{md,markdown}"
            group:
              piped: true
              jobs:
                - name: markdownlint
                  # https://github.com/DavidAnson/markdownlint-cli2#command-line
                  run: markdownlint-cli2 '{staged_files}'
                  only:
                    - run: markdownlint-cli2 --version
                - name: typos
                  run: typos --force-exclude '{staged_files}'
                  only:
                    - run: typos --version

          ## python
          - name: python
            file_types:
              - text
            group:
              parallel: true
              piped: false
              jobs:
                # [Using uv in pre-commit](https://docs.astral.sh/uv/guides/integration/pre-commit/#using-uv-in-pre-commit)
                - name: uv-lock-check
                  # 仅检查 lock 文件是否应该更新
                  run: uv lock --check
                  glob: *uv_files
                  only: *uv_only_run
                # [ruff-pre-commit/.pre-commit-hooks.yaml](https://github.com/astral-sh/ruff-pre-commit/blob/main/.pre-commit-hooks.yaml)
                # [ruff/integrations/pre-commit](https://docs.astral.sh/ruff/integrations/#pre-commit)
                - name: ruff-check
                  run: ruff check --force-exclude '{staged_files}'
                  glob: *ruff_files
                  only: *ruff_only_run
                # [pre-commit/mirrors-mypy/.pre-commit-config.yaml](https://github.com/pre-commit/mirrors-mypy/blob/main/.pre-commit-hooks.yaml)
                - name: mypy
                  run: mypy '{staged_files}'
                  glob: "*.py"
                  only:
                    - run: python --version
                    - run: mypy --version

          ## shell
          - name: shell
            file_types:
              - text
            group:
              parallel: true
              piped: false
              jobs:
                - name: shellcheck
                  # [ShellCheck, a static analysis tool for shell scripts](https://github.com/koalaman/shellcheck)
                  run: shellcheck --external-sources '{staged_files}'
                  glob: *sh_files
                  only:
                    - run: shellcheck --version

commit-msg:
  piped: true
  jobs:
    - name: typos
      run: typos --force-exclude --write-changes '{1}'
      stage_fixed: true
      only:
        - run: typos --version
    - name: autocorrect
      run: autocorrect --fix '{1}'
      stage_fixed: true
      only:
        - run: autocorrect --version
    - name: editorconfig-checker
      run: editorconfig-checker '{1}'
      only:
        - run: editorconfig-checker --version
    - name: commitizen
      # https://github.com/commitizen-tools/commitizen/blob/master/.pre-commit-hooks.yaml
      run: cz check --allow-abort --commit-msg-file '{1}'

post-checkout:
  jobs:
    - name: python
      group:
        jobs:
          - &uv_sync
            name: uv-sync
            run: uv sync --locked
            only: *uv_only_run
            glob: *uv_files
post-merge:
  jobs:
    - name: python
      group:
        jobs:
          - *uv_sync
